{"version":3,"sources":["utils/constants.js","utils/conversions.js","contracts/carmio_approval.teal","contracts/carmio_clear.teal","components/Header/Header.jsx","assets/header_img.png","components/Car/CreateCar/CreateCar.jsx","components/Notifications.jsx","components/Navbar/Navbar.jsx","components/Car/CarCard/CarCard.jsx","components/Loader.jsx","components/Car/Cars/Cars.jsx","components/Footer/Footer.jsx","assets/logo.png","App.js","reportWebVitals.js","index.js","utils/carmio.js"],"names":["config","algodClient","algosdk","Algodv2","indexerClient","Indexer","myAlgoConnect","MyAlgoConnect","minRound","carmioNote","numLocalInts","numLocalBytes","numGlobalInts","numGlobalBytes","ALGORAND_DECIMALS","base64ToUTF8String","base64String","Buffer","from","toString","utf8ToBase64String","utf8String","truncateAddress","address","slice","length","truncateCarName","name","microAlgosToString","num","BigNumber","shiftedBy","toFixed","stringToMicroAlgos","str","toNumber","Header","headerImg","goToCars","className","style","background","backgroundSize","Button","onClick","variant","CreateCar","createNewCar","useState","image","setImage","setName","brand","setBrand","initialPrice","setInitialPrice","currentBidding","setCurrentBidding","description","setDescription","isFormFilled","useCallback","showModal","setShowModal","handleCloseModal","Modal","show","onHide","centered","closeButton","Title","Form","Body","FloatingLabel","controlId","label","Control","type","placeholder","value","onChange","e","target","as","height","maxLength","Footer","disabled","Notification","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","NotificationSuccess","text","NotificationError","DefaultProps","defaultProps","CusNavbar","logo","balance","avatar","login","logout","createCarFunc","data","createCarAction","then","toast","catch","error","isAdmin","accountInfo","href","rel","width","src","alt","marginLeft","toLocaleLowerCase","loginBtn","logoutBtn","Nav","Link","createBtn","OverlayTrigger","placement","overlay","Tooltip","id","Alert","Navbar","bg","expand","fixed","Container","fluid","Brand","Toggle","Collapse","navbarScroll","CarCard","car","fetchBalance","buyCar","bidCar","sold","isDetail","setDetail","biddingPrice","setBiddingPrice","isBid","setBid","isBuy","setBuy","isSold","parseInt","isBidFormFilled","Card","Img","Subtitle","Text","Loader","Spinner","animation","role","Cars","carSection","cars","setCars","loading","setLoading","getCars","getCarsAction","finally","_","useEffect","buyCarAction","bidCarAction","Row","Col","sm","ref","map","index","App","useRef","setAddress","setBalance","accountAddress","lookupAccountByID","do","response","_balance","account","amount","console","log","connectWallet","connect","accounts","_account","current","scrollIntoView","behavior","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","Carmio","appId","owner","this","compileProgram","programSource","encoder","TextEncoder","programBytes","encode","compile","compileResponse","Uint8Array","result","senderAddress","getTransactionParams","params","approvalProgram","compiledApprovalProgram","clearProgram","compiledClearProgram","note","encodeUint64","appArgs","txn","makeApplicationCreateTxnFromObject","suggestedParams","onComplete","OnApplicationComplete","NoOpOC","numLocalByteSlices","numGlobalByteSlices","txId","txID","signTransaction","toByte","signedTxn","sendRawTransaction","blob","waitForConfirmation","confirmedTxn","pendingTransactionInformation","transactionResponse","buyArg","appCallTxn","makeApplicationCallTxnFromObject","appIndex","paymentTxn","makePaymentTxnWithSuggestedParamsFromObject","to","txnArray","groupID","computeGroupID","i","group","tx","bidArg","encodedNote","searchForTransactions","notePrefix","txType","transactionInfo","transactions","transaction","getApplication","push","lookupApplications","includeAll","application","deleted","globalState","creator","getField","fieldName","find","state","key","undefined","field","bytes","uint"],"mappings":"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","file":"static/js/main.46bdc75e.chunk.js","sourcesContent":["import algosdk from \"algosdk\";\r\nimport MyAlgoConnect from \"@randlabs/myalgo-connect\";\r\n\r\nconst config = {\r\n    algodToken: \"\",\r\n    algodServer: \"https://node.testnet.algoexplorerapi.io\",\r\n    algodPort: \"\",\r\n    indexerToken: \"\",\r\n    indexerServer: \"https://algoindexer.testnet.algoexplorerapi.io\",\r\n    indexerPort: \"\",\r\n}\r\n\r\nexport const algodClient = new algosdk.Algodv2(config.algodToken, config.algodServer, config.algodPort)\r\n\r\nexport const indexerClient = new algosdk.Indexer(config.indexerToken, config.indexerServer, config.indexerPort);\r\n\r\nexport const myAlgoConnect = new MyAlgoConnect();\r\n\r\nexport const minRound = 21540981;\r\n\r\n// https://github.com/algorandfoundation/ARCs/blob/main/ARCs/arc-0002.md\r\nexport const carmioNote = \"carmio-contract:v2\"\r\n\r\n// Maximum local storage allocation, immutable\r\nexport const numLocalInts = 0;\r\nexport const numLocalBytes = 0;\r\n// Maximum global storage allocation, immutable\r\nexport const numGlobalInts = 3; // Global variables stored as Int: sold\r\nexport const numGlobalBytes = 4; // Global variables stored as Bytes: image, name, brand, description\r\n\r\nexport const ALGORAND_DECIMALS = 6;","import {ALGORAND_DECIMALS} from \"./constants\";\r\nimport BigNumber from \"bignumber.js\";\r\n\r\nexport const base64ToUTF8String = (base64String) => {\r\n    return Buffer.from(base64String, 'base64').toString(\"utf-8\")\r\n}\r\n\r\nexport const utf8ToBase64String = (utf8String) => {\r\n    return Buffer.from(utf8String, 'utf8').toString('base64')\r\n}\r\n\r\n// Truncate is done in the middle to allow for checking of first and last chars simply to ensure correct address\r\nexport const truncateAddress = (address) => {\r\n    if (!address) return\r\n    return address.slice(0, 5) + \"...\" + address.slice(address.length - 5, address.length);\r\n}\r\n\r\nexport const truncateCarName = (name) => {\r\n    if (!name) return\r\n    return name.slice(0, 15) + \"...\";\r\n}\r\n\r\n// Amounts in microAlgos (e.g. 10500) are shown as algos (e.g. 10.5) in the frontend\r\nexport const microAlgosToString = (num) => {\r\n    if (!num) return\r\n    let bigNumber = new BigNumber(num)\r\n    return bigNumber.shiftedBy(-ALGORAND_DECIMALS).toFixed(2);\r\n}\r\n\r\n// Convert an amount entered as algos (e.g. 10.5) to microAlgos (e.g. 10500)\r\nexport const stringToMicroAlgos = (str) => {\r\n    if (!str) return\r\n    let bigNumber = new BigNumber(str)\r\n    return bigNumber.shiftedBy(ALGORAND_DECIMALS).toNumber();\r\n}","export default \"#pragma version 6\\r\\ntxn ApplicationID\\r\\nint 0\\r\\n==\\r\\nbnz main_l8\\r\\ntxn OnCompletion\\r\\nint DeleteApplication\\r\\n==\\r\\nbnz main_l7\\r\\ntxna ApplicationArgs 0\\r\\nbyte \\\"buy\\\"\\r\\n==\\r\\nbnz main_l6\\r\\ntxna ApplicationArgs 0\\r\\nbyte \\\"bid\\\"\\r\\n==\\r\\nbnz main_l5\\r\\nerr\\r\\nmain_l5:\\r\\nbyte \\\"CURRENT BIDDING\\\"\\r\\ngtxn 1 Amount\\r\\napp_global_put\\r\\nint 1\\r\\nreturn\\r\\nmain_l6:\\r\\nbyte \\\"SOLD\\\"\\r\\nbyte \\\"SOLD\\\"\\r\\napp_global_get\\r\\nint 1000000\\r\\n+\\r\\napp_global_put\\r\\nint 1\\r\\nreturn\\r\\nmain_l7:\\r\\ntxn Sender\\r\\nglobal CreatorAddress\\r\\n==\\r\\nreturn\\r\\nmain_l8:\\r\\ntxn NumAppArgs\\r\\nint 6\\r\\n==\\r\\nassert\\r\\ntxn Note\\r\\nbyte \\\"carmio-contract:v2\\\"\\r\\n==\\r\\nassert\\r\\ntxna ApplicationArgs 3\\r\\nbtoi\\r\\nint 0\\r\\n>\\r\\nassert\\r\\ntxna ApplicationArgs 4\\r\\nbtoi\\r\\nint 0\\r\\n>\\r\\nassert\\r\\nbyte \\\"IMAGE\\\"\\r\\ntxna ApplicationArgs 0\\r\\napp_global_put\\r\\nbyte \\\"NAME\\\"\\r\\ntxna ApplicationArgs 1\\r\\napp_global_put\\r\\nbyte \\\"BRAND\\\"\\r\\ntxna ApplicationArgs 2\\r\\napp_global_put\\r\\nbyte \\\"INITIAL PRICE\\\"\\r\\ntxna ApplicationArgs 3\\r\\nbtoi\\r\\napp_global_put\\r\\nbyte \\\"CURRENT BIDDING\\\"\\r\\ntxna ApplicationArgs 4\\r\\nbtoi\\r\\napp_global_put\\r\\nbyte \\\"DESCRIPTION\\\"\\r\\ntxna ApplicationArgs 5\\r\\napp_global_put\\r\\nbyte \\\"SOLD\\\"\\r\\nint 0\\r\\napp_global_put\\r\\nint 1\\r\\nreturn\";","export default \"#pragma version 6\\r\\nint 1\\r\\nreturn\";","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button } from \"react-bootstrap\";\r\nimport './Header.css';\r\n\r\nconst Header = ({ headerImg, goToCars }) => (\r\n    <div className=\"d-flex justify-content-center vh-100\" style={{ background: \"url(\" + headerImg + \") no-repeat center\", backgroundSize: \"90% auto\" }}>\r\n        <Button\r\n            onClick={() => goToCars()}\r\n            variant=\"outline-light\"\r\n            className=\"border-none px-3 mt-3 view-car-btn\"\r\n        >\r\n            View Carz\r\n        </Button>\r\n    </div>\r\n);\r\n\r\nHeader.propTypes = {\r\n    headerImg: PropTypes.string,\r\n    goToCars: PropTypes.func,\r\n};\r\n\r\nexport default Header;","export default __webpack_public_path__ + \"static/media/header_img.bde0f678.png\";","import React, { useCallback, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button, FloatingLabel, Form, Modal } from \"react-bootstrap\";\r\nimport { stringToMicroAlgos } from \"../../../utils/conversions\";\r\nimport './CreateCar.css';\r\n\r\nconst CreateCar = ({ createNewCar }) => {\r\n    const [image, setImage] = useState(\"\");\r\n    const [name, setName] = useState(\"\");\r\n    const [brand, setBrand] = useState(\"\");\r\n    const [initialPrice, setInitialPrice] = useState(0);\r\n    const [currentBidding, setCurrentBidding] = useState(0);\r\n    const [description, setDescription] = useState(\"\");\r\n\r\n    const isFormFilled = useCallback(() => {\r\n        return image && name && brand && initialPrice > 0 && currentBidding > 0 && description;\r\n    }, [image, name, brand, initialPrice, currentBidding, description]);\r\n\r\n    const [showModal, setShowModal] = useState(false);\r\n    const handleCloseModal = () => setShowModal(false);\r\n    const handleShowModal = () => setShowModal(true);\r\n\r\n    return (\r\n        <>\r\n            <Button\r\n                onClick={handleShowModal}\r\n                variant=\"dark\"\r\n                className=\"rounded-pill py-1 px-5\"\r\n            >\r\n                Create\r\n                <i className=\"bi bi-plus\"></i>\r\n            </Button>\r\n            <Modal show={showModal} onHide={handleCloseModal} centered>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Create New Car Post</Modal.Title>\r\n                </Modal.Header>\r\n                <Form>\r\n                    <Modal.Body>\r\n                        <FloatingLabel\r\n                            controlId=\"inputImage\"\r\n                            label=\"Car Image\"\r\n                            className=\"mb-3\"\r\n                        >\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                className=\"formInput\"\r\n                                placeholder=\"Enter car image URL\"\r\n                                value={image}\r\n                                onChange={(e) => setImage(e.target.value)}\r\n                            />\r\n                        </FloatingLabel>\r\n\r\n                        <FloatingLabel\r\n                            controlId=\"inputName\"\r\n                            label=\"Name\"\r\n                            className=\"mb-3\"\r\n                        >\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                className=\"formInput\"\r\n                                placeholder=\"Enter car name\"\r\n                                onChange={(e) => setName(e.target.value)}\r\n                            />\r\n                        </FloatingLabel>\r\n\r\n                        <FloatingLabel\r\n                            controlId=\"inputBrand\"\r\n                            label=\"Brand\"\r\n                            className=\"mb-3\"\r\n                        >\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                className=\"formInput\"\r\n                                placeholder=\"Enter car brand\"\r\n                                onChange={(e) => setBrand(e.target.value)}\r\n                            />\r\n                        </FloatingLabel>\r\n\r\n                        <FloatingLabel\r\n                            controlId=\"inputInitialPrice\"\r\n                            label=\"Initial Price In ALGO\"\r\n                            className=\"mb-3\"\r\n                        >\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                className=\"formInput\"\r\n                                placeholder=\"Enter car initial price\"\r\n                                onChange={(e) => setInitialPrice(stringToMicroAlgos(e.target.value))}\r\n                            />\r\n                        </FloatingLabel>\r\n\r\n                        <FloatingLabel\r\n                            controlId=\"inputCurrentBidding\"\r\n                            label=\"Current Bidding In ALGO\"\r\n                            className=\"mb-3\"\r\n                        >\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                className=\"formInput\"\r\n                                placeholder=\"Enter car current bidding\"\r\n                                onChange={(e) => setCurrentBidding(stringToMicroAlgos(e.target.value))}\r\n                            />\r\n                        </FloatingLabel>\r\n\r\n                        <FloatingLabel\r\n                            controlId=\"inputDescription\"\r\n                            label=\"Description\"\r\n                            className=\"mb-3\"\r\n                        >\r\n                            <Form.Control\r\n                                as=\"textarea\"\r\n                                className=\"formTextarea\"\r\n                                placeholder=\"Enter car description\"\r\n                                style={{ height: \"100px\" }}\r\n                                maxLength={100}\r\n                                onChange={(e) => setDescription(e.target.value)}\r\n                            />\r\n                        </FloatingLabel>\r\n                    </Modal.Body>\r\n                </Form>\r\n                <Modal.Footer>\r\n                    <Button\r\n                        onClick={() => {\r\n                            createNewCar({\r\n                                image,\r\n                                name,\r\n                                brand,\r\n                                initialPrice,\r\n                                currentBidding,\r\n                                description,\r\n                            });\r\n                            handleCloseModal();\r\n                        }}\r\n                        disabled={!isFormFilled()}\r\n                        className=\"cus-btn border-none text-white\"\r\n                        variant=\"\"\r\n\r\n                    >\r\n                        Save product\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nCreateCar.propTypes = {\r\n    createNewCar: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default CreateCar;","import React from \"react\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Notification = () => (\r\n    <ToastContainer\r\n        position=\"bottom-center\"\r\n        autoClose={5000}\r\n        hideProgressBar\r\n        newestOnTop\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable={false}\r\n        pauseOnHover\r\n    />\r\n);\r\n\r\nconst NotificationSuccess = ({ text }) => (\r\n    <div>\r\n        <i className=\"bi bi-check-circle-fill text-success mx-2\" />\r\n        <span className=\"text-secondary mx-1\">{text}</span>\r\n    </div>\r\n);\r\n\r\nconst NotificationError = ({ text }) => (\r\n    <div>\r\n        <i className=\"bi bi-x-circle-fill text-danger mx-2\" />\r\n        <span className=\"text-secondary mx-1\">{text}</span>\r\n    </div>\r\n);\r\n\r\nconst Props = {\r\n    text: PropTypes.string,\r\n};\r\n\r\nconst DefaultProps = {\r\n    text: \"\",\r\n};\r\n\r\nNotificationSuccess.propTypes = Props;\r\nNotificationSuccess.defaultProps = DefaultProps;\r\n\r\nNotificationError.propTypes = Props;\r\nNotificationError.defaultProps = DefaultProps;\r\n\r\nexport { Notification, NotificationSuccess, NotificationError };\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport CreateCar from \"../../components/Car/CreateCar/CreateCar\";\r\nimport { microAlgosToString, truncateAddress } from '../../utils/conversions';\r\nimport { Button, Container, Nav, Navbar, OverlayTrigger, Tooltip, Alert } from \"react-bootstrap\";\r\nimport { NotificationError, NotificationSuccess } from \"../../components/Notifications\";\r\nimport { createCarAction } from \"../../utils/carmio\";\r\nimport { toast } from \"react-toastify\";\r\nimport './Navbar.css';\r\n\r\nfunction CusNavbar({ logo, balance, address, avatar, login, logout }) {\r\n    const createCarFunc = async (data) => {\r\n        createCarAction(address, data)\r\n            .then(() => toast(<NotificationSuccess text=\"Car added successfully.\" />))\r\n            .catch(error => toast(<NotificationError text={`Failed to create a car. \\n ERROR: ${error}`} />))\r\n    };\r\n\r\n    const isAdmin = \"ZORSQQE5UXXUAH3VG5AZIO5E55JSVICUE2MWHOWWA2BJCULGFXD6MXYDKE\" === address;\r\n\r\n    const accountInfo = <a href={`https://testnet.algoexplorer.io/address/${address}`} target=\"_blank\" rel=\"noreferrer\" className=\"text-decoration-none cus-navbar-btn-avatar border-none border-1 cus-primary\" variant=\"\">\r\n        <div style={{ width: \"40px\", background: \"#000\" }}>\r\n            <img src={avatar} alt=\"avatar\" className=\"avatar\" />\r\n        </div>\r\n        <div style={{ marginLeft: \"10px\" }}>\r\n            <b>{microAlgosToString(balance)} ALGO</b>\r\n            <br />\r\n            addr: {truncateAddress(address)?.toLocaleLowerCase()}\r\n        </div>\r\n    </a>\r\n\r\n    const loginBtn = <Button onClick={() => login()} className=\"cus-navbar-btn border-none border-1 cus-primary\" variant=\"\">Login</Button>\r\n\r\n    const logoutBtn = <Nav.Link onClick={() => logout()} className=\"text-white\">Logout</Nav.Link>\r\n\r\n    const createBtn = !isAdmin ? <OverlayTrigger\r\n        key=\"createBtn\"\r\n        placement=\"bottom\"\r\n        overlay={\r\n            <Tooltip id=\"createBtnTooltip\">\r\n                <Alert variant=\"warning\" className=\"p-2 border-none\">\r\n                    Only Admin can create car post. Please contact admins!\r\n                </Alert>\r\n            </Tooltip>\r\n        }\r\n    >\r\n        <Button\r\n            variant=\"dark\"\r\n            className=\"rounded-pill py-1 px-5 text-muted\"\r\n        >\r\n            Create\r\n            <i className=\"bi bi-plus\"></i>\r\n        </Button>\r\n    </OverlayTrigger> : <CreateCar createNewCar={createCarFunc} />;\r\n\r\n    return (\r\n        <Navbar bg=\"\" expand=\"lg\" fixed=\"top\" className=\"cus-navbar\">\r\n            <Container fluid className=\"px-5\">\r\n                <Navbar.Brand href=\"#\">\r\n                    <img src={logo} alt=\"carmio\" width={100} />\r\n                </Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"navbarScroll\" />\r\n                <Navbar.Collapse id=\"navbarScroll\">\r\n                    <Nav className=\"me-auto my-2 my-lg-0\" navbarScroll>\r\n                        {address && createBtn}\r\n                        {address && logoutBtn}\r\n                    </Nav>\r\n                    {address ? accountInfo : loginBtn}\r\n                </Navbar.Collapse>\r\n            </Container>\r\n        </Navbar>\r\n    );\r\n}\r\n\r\nCusNavbar.propTypes = {\r\n    logo: PropTypes.string,\r\n    balance: PropTypes.number,\r\n    address: PropTypes.string,\r\n    avatar: PropTypes.string,\r\n    login: PropTypes.func,\r\n    logout: PropTypes.func,\r\n};\r\n\r\nexport default CusNavbar;","import React, { useState, useCallback } from \"react\"\r\nimport PropTypes from 'prop-types';\r\nimport { Card, Button, Alert, Form } from \"react-bootstrap\";\r\nimport { microAlgosToString, truncateCarName } from '../../../utils/conversions';\r\nimport './CarCard.css';\r\n\r\nfunction CarCard({ address, car, balance, fetchBalance, buyCar, bidCar }) {\r\n  const { image, name, brand, initialPrice, currentBidding, description, sold } = car;\r\n\r\n  const [isDetail, setDetail] = useState(false)\r\n  const [biddingPrice, setBiddingPrice] = useState(0)\r\n  const [isBid, setBid] = useState(false)\r\n  const [isBuy, setBuy] = useState(false)\r\n\r\n  let isSold = parseInt(microAlgosToString(sold));\r\n\r\n  const isBidFormFilled = useCallback(() => biddingPrice > parseInt(microAlgosToString(currentBidding)), [biddingPrice, currentBidding]);\r\n\r\n  function buyNowFunc() {\r\n    buyCar(car);\r\n    fetchBalance(address)\r\n    setBuy(!isBuy);\r\n  }\r\n\r\n  function bidNowFunc() {\r\n    bidCar(car, biddingPrice);\r\n    fetchBalance(address)\r\n    setBid(!isBid);\r\n  }\r\n\r\n  return (\r\n    <Card className=\"car-card\">\r\n      <Card.Img variant=\"top\" className=\"car-card-image\" src={image} />\r\n\r\n      {/* car basic information */}\r\n      <Card.Body className=\"car-card-info\">\r\n        <Card.Title>{truncateCarName(name)}</Card.Title>\r\n        <Card.Subtitle className=\"car-card-subtitle\">{brand}</Card.Subtitle>\r\n        <Card.Text className=\"car-card-sub-others\">\r\n          Initial price: <b>{microAlgosToString(initialPrice)} ALGO</b>\r\n          <br />\r\n          Current bidding: <b>{microAlgosToString(currentBidding)} ALGO</b>\r\n          <br />\r\n        </Card.Text>\r\n      </Card.Body>\r\n\r\n      <div className=\"car-card-purchase-container\">\r\n        {/* car bid information */}\r\n        <Button onClick={isSold === 1 ? () => false : () => setBid(!isBid)} variant=\"\" disabled={isSold === 1 ? true : false} className=\"car-card-purchase-btn\">Bid Price</Button>\r\n        {/* car buy information */}\r\n        <Button onClick={isSold === 1 ? () => false : () => setBuy(!isBuy)} variant=\"\" disabled={isSold === 1 ? true : false} className=\"car-card-purchase-btn\">Buy Now</Button>\r\n      </div>\r\n\r\n      {/* car sold btn */}\r\n      {isSold === 1 ? <div className=\"car-sold-btn\">Sold</div> : \"\"}\r\n\r\n      {/* car detail card information */}\r\n      <Button onClick={() => setDetail(!isDetail)} variant=\"\" className=\"car-card-detail-btn\">Details</Button>\r\n\r\n      {/* card information close btn */}\r\n      {isDetail &&\r\n        <div className=\"car-card-detail\">\r\n          <Button onClick={() => setDetail(!isDetail)} variant=\"\" className=\"car-card-cancel-btn\">X</Button>\r\n          <p>{description}</p>\r\n        </div>\r\n      }\r\n\r\n      {/* car bid card */}\r\n      {isBid &&\r\n        <div className=\"car-card-purchase-detail\">\r\n          <Button onClick={() => setBid(!isBid)} variant=\"\" className=\"car-card-cancel-btn\">X</Button>\r\n          <p className=\"car-card-purchase-title\">Bid Now</p>\r\n          <p>\r\n            This allows you to bid around initial price\r\n          </p>\r\n          <hr />\r\n          <p>\r\n            Current bidding: <b>{microAlgosToString(currentBidding)} ALGO</b>\r\n            <br /><br />\r\n            Current Balance: <b>{microAlgosToString(balance)} ALGO</b>\r\n          </p>\r\n          <hr />\r\n          <Form>\r\n            <Form.Control className=\"formInput\" variant=\"dark\" type=\"number\" id=\"biddingPrice\" placeholder=\"Bidding price in ALGO\" onChange={(e) => setBiddingPrice(e.target.value)} />\r\n          </Form>\r\n          <br />\r\n          <Button\r\n            onClick={() => bidNowFunc(biddingPrice)}\r\n            disabled={!isBidFormFilled()}\r\n            variant=\"\"\r\n            className=\"car-card-confirm-trans-btn\">\r\n            Confirm Transaction\r\n          </Button>\r\n        </div>\r\n      }\r\n\r\n      {/* car buy card */}\r\n      {isBuy &&\r\n        <div className=\"car-card-purchase-detail\">\r\n          <Button onClick={() => setBuy(!isBuy)} variant=\"\" className=\"car-card-cancel-btn\">X</Button>\r\n          <p className=\"car-card-purchase-title\">Buy Now</p>\r\n          <p>\r\n            This allows you to buy at initial price NOW!!!\r\n            <br /><br />\r\n            Initial price: <b>{microAlgosToString(initialPrice)} ALGO</b>\r\n            <br /><br />\r\n            Current Balance: <b>{microAlgosToString(balance)} ALGO</b>\r\n          </p>\r\n          <Alert variant=\"warning\" className=\"p-2 border-none\">\r\n            Please press <b>“Confirm Transaction”</b> to continue with payment.\r\n          </Alert>\r\n          <Button onClick={buyNowFunc} variant=\"\" className=\"car-card-confirm-trans-btn\">\r\n            Confirm Transaction\r\n          </Button>\r\n        </div>\r\n      }\r\n\r\n    </Card>);\r\n}\r\n\r\nCarCard.propTypes = {\r\n  goToCarSection: PropTypes.func,\r\n  address: PropTypes.string.isRequired,\r\n  car: PropTypes.instanceOf(Object).isRequired,\r\n  balance: PropTypes.number,\r\n  fetchBalance: PropTypes.func.isRequired,\r\n  buyCar: PropTypes.func.isRequired,\r\n  bidCar: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default CarCard;","import React from \"react\";\r\nimport {Spinner} from \"react-bootstrap\";\r\n\r\nconst Loader = () => (\r\n    <div className=\"d-flex justify-content-center\">\r\n        <Spinner animation=\"border\" role=\"status\" className=\"opacity-25\">\r\n            <span className=\"visually-hidden\">Loading...</span>\r\n        </Spinner>\r\n    </div>\r\n);\r\n\r\nexport default Loader;","import React, { useState, useEffect } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport { NotificationSuccess, NotificationError } from \"../../Notifications\";\r\nimport PropTypes from 'prop-types';\r\nimport { Container, Row, Col, Alert } from \"react-bootstrap\";\r\nimport CarCard from '../CarCard/CarCard';\r\nimport Loader from \"../../Loader\";\r\nimport { buyCarAction, getCarsAction, bidCarAction } from \"../../../utils/carmio\";\r\n\r\nconst Cars = ({ carSection, address, balance, fetchBalance }) => {\r\n    const [cars, setCars] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    // get cars data\r\n    const getCars = async () => {\r\n        setLoading(true);\r\n        getCarsAction()\r\n            .then(cars => {\r\n                if (cars) {\r\n                    toast(<NotificationSuccess text=\"Successfully loader cars.\" />);\r\n                    setCars(cars);\r\n                }\r\n            })\r\n            .catch(() => {\r\n                toast(<NotificationError text=\"Failed to load cars.\" />);\r\n            })\r\n            .finally(_ => {\r\n                setLoading(false);\r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        getCars();\r\n    }, []);\r\n\r\n    // buy car\r\n    const buyCar = async (car) => {\r\n        setLoading(true);\r\n        buyCarAction(address, car)\r\n            .then(() => {\r\n                toast(<NotificationSuccess text=\"Car bought successfully\" />);\r\n                getCars();\r\n                fetchBalance(address);\r\n            })\r\n            .catch(error => {\r\n                toast(<NotificationError text=\"Failed to purchase car.\" />);\r\n                setLoading(false);\r\n            })\r\n    };\r\n\r\n    // bid car\r\n    const bidCar = async (car, biddingPrice) => {\r\n        setLoading(true);\r\n        bidCarAction(address, car, biddingPrice)\r\n            .then(() => {\r\n                toast(<NotificationSuccess text=\"Car bid successfully\" />);\r\n                getCars();\r\n                fetchBalance(address);\r\n            })\r\n            .catch(() => {\r\n                toast(<NotificationError text=\"Failed to bid car.\" />);\r\n                setLoading(false);\r\n            })\r\n    };\r\n\r\n    if (loading) {\r\n        return (\r\n            <Container className=\"my-5\">\r\n                <Row className=\"justify-content-center\">\r\n                    <Col sm={3} className=\"text-center\">\r\n                        <Loader />\r\n                        <br />\r\n                        <Alert variant=\"info\" className=\"p-2 border-none\">\r\n                            Loading Car details!!!\r\n                        </Alert>\r\n                    </Col>\r\n                </Row>\r\n            </Container>);\r\n    }\r\n\r\n    return (\r\n        <Container ref={carSection} className=\"my-5\">\r\n            <Row>\r\n                {cars.map((car, index) => (\r\n                    <Col key={index} sm={3} className=\"mt-5\">\r\n                        <CarCard address={address} car={car} balance={balance} fetchBalance={fetchBalance} buyCar={buyCar} bidCar={bidCar} />\r\n                    </Col>\r\n                ))}\r\n            </Row>\r\n        </Container>\r\n    );\r\n};\r\n\r\nCars.propTypes = {\r\n    goToCarSection: PropTypes.func,\r\n    address: PropTypes.string.isRequired,\r\n    balance: PropTypes.number,\r\n    fetchBalance: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Cars;","import React from 'react';\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport './Footer.css';\r\n\r\nconst Footer = () => (\r\n    <Container fluid className=\"py-2 footer\">\r\n        <Row className=\"p-3\">\r\n            <Col>Copyrights (C) @ibukunoluwanap</Col>\r\n            <Col sm={3}>\r\n                <Row>\r\n                    <Col>\r\n                        <a href=\"https://github.com/ibukunoluwanap/\" className=\"text-white text-decoration-none\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                            <i className=\"fa-brands fa-github\"></i>\r\n                        </a>\r\n                    </Col>\r\n                    <Col>\r\n                        <a href=\"https://twitter.com/ibukunoluwanap/\" className=\"text-white text-decoration-none\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                            <i className=\"fa-brands fa-twitter\"></i>\r\n                        </a>\r\n                    </Col>\r\n                    <Col>\r\n                        <a href=\"https://www.linkedin.com/in/ibukunoluwanap/\" className=\"text-white text-decoration-none\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                            <i className=\"fa-brands fa-linkedin\"></i>\r\n                        </a>\r\n                    </Col>\r\n                    <Col>\r\n                        <a href=\"https://www.instagram.com/ibukunoluwanap/\" className=\"text-white text-decoration-none\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                            <i className=\"fa-brands fa-instagram\"></i>\r\n                        </a>\r\n                    </Col>\r\n                    <Col>\r\n                        <a href=\"https://www.facebook.com/ibknap/\" className=\"text-white text-decoration-none\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                            <i className=\"fa-brands fa-facebook\"></i>\r\n                        </a>\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    </Container>\r\n);\r\n\r\nexport default Footer;","export default __webpack_public_path__ + \"static/media/logo.906f0776.png\";","import React, { useState, useRef } from \"react\";\nimport Header from \"./components/Header/Header\";\nimport headerImg from \"./assets/header_img.png\";\nimport CusNavbar from \"./components/Navbar/Navbar\";\nimport Cars from \"./components/Car/Cars/Cars\";\nimport Footer from './components/Footer/Footer';\nimport {Notification} from \"./components/Notifications\";\nimport { indexerClient, myAlgoConnect } from \"./utils/constants\";\nimport logo from \"./assets/logo.png\";\nimport './App.css';\n\nfunction App() {\n  // hoofs\n  const carSection = useRef(null);\n  const [address, setAddress] = useState(null);\n  const [balance, setBalance] = useState(0);\n  // variables\n  const avatar = \"https://library.kissclipart.com/20191116/wze/kissclipart-avatar-icon-awesome-set-icon-forum-user-icon-18f64889026582d3.png\";\n  const goToCars = () => carSection.current?.scrollIntoView({ behavior: 'smooth' });\n\n  // fetch balance\n  const fetchBalance = async (accountAddress) => {\n    indexerClient.lookupAccountByID(accountAddress).do()\n      .then((response) => {\n        const _balance = response.account.amount;\n        setBalance(_balance);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  // connect to wallet\n  const connectWallet = async () => {\n    myAlgoConnect.connect()\n      .then(accounts => {\n        const _account = accounts[0];\n        setAddress(_account.address);\n        fetchBalance(_account.address);\n      }).catch(error => {\n        console.log('Could not connect to MyAlgo wallet');\n        console.error(error);\n      })\n  };\n\n  // disconnect from wallet\n  const disconnectWallet = () => {\n    setAddress(null);\n    setBalance(null);\n  };\n\n  return (\n    <>\n      <Notification />\n      <div className=\"App\">\n        <CusNavbar login={connectWallet} logout={disconnectWallet} logo={logo} balance={balance} address={address} avatar={avatar} />\n        <Header headerImg={headerImg} goToCars={goToCars} />\n        {address && <Cars carSection={carSection} address={address} balance={balance} fetchBalance={fetchBalance} />}\n        <Footer />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap-icons/font/bootstrap-icons.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\nreportWebVitals();","import algosdk from \"algosdk\";\r\nimport {\r\n    algodClient,\r\n    indexerClient,\r\n    carmioNote,\r\n    minRound,\r\n    myAlgoConnect,\r\n    numGlobalBytes,\r\n    numGlobalInts,\r\n    numLocalBytes,\r\n    numLocalInts\r\n} from \"./constants\";\r\n/* eslint import/no-webpack-loader-syntax: off */\r\nimport approvalProgram from \"!!raw-loader!../contracts/carmio_approval.teal\";\r\nimport clearProgram from \"!!raw-loader!../contracts/carmio_clear.teal\";\r\nimport { base64ToUTF8String, utf8ToBase64String, stringToMicroAlgos } from \"./conversions\";\r\n\r\n\r\nclass Carmio {\r\n    constructor(image, name, brand, initialPrice, currentBidding, description, sold, appId, owner) {\r\n        this.image = image;\r\n        this.name = name;\r\n        this.brand = brand;\r\n        this.initialPrice = initialPrice;\r\n        this.currentBidding = currentBidding;\r\n        this.description = description;\r\n        this.sold = sold;\r\n        this.appId = appId;\r\n        this.owner = owner;\r\n    }\r\n}\r\n\r\n// Compile smart contract in .teal format to program\r\nconst compileProgram = async (programSource) => {\r\n    let encoder = new TextEncoder();\r\n    let programBytes = encoder.encode(programSource);\r\n    let compileResponse = await algodClient.compile(programBytes).do();\r\n    return new Uint8Array(Buffer.from(compileResponse.result, \"base64\"));\r\n}\r\n\r\n// CREATE Car: ApplicationCreateTxn\r\nexport const createCarAction = async (senderAddress, car) => {\r\n    let params = await algodClient.getTransactionParams().do();\r\n\r\n    // Compile programs\r\n    const compiledApprovalProgram = await compileProgram(approvalProgram)\r\n    const compiledClearProgram = await compileProgram(clearProgram)\r\n\r\n    // Build note to identify transaction later and required app args as Uint8Arrays\r\n    let note = new TextEncoder().encode(carmioNote);\r\n    let image = new TextEncoder().encode(car.image);\r\n    let name = new TextEncoder().encode(car.name);\r\n    let brand = new TextEncoder().encode(car.brand);\r\n    let initialPrice = algosdk.encodeUint64(car.initialPrice);\r\n    let currentBidding = algosdk.encodeUint64(car.currentBidding);\r\n    let description = new TextEncoder().encode(car.description);\r\n\r\n    let appArgs = [image, name, brand, initialPrice, currentBidding, description]\r\n\r\n    // Create ApplicationCreateTxn\r\n    let txn = algosdk.makeApplicationCreateTxnFromObject({\r\n        from: senderAddress,\r\n        suggestedParams: params,\r\n        onComplete: algosdk.OnApplicationComplete.NoOpOC,\r\n        approvalProgram: compiledApprovalProgram,\r\n        clearProgram: compiledClearProgram,\r\n        numLocalInts: numLocalInts,\r\n        numLocalByteSlices: numLocalBytes,\r\n        numGlobalInts: numGlobalInts,\r\n        numGlobalByteSlices: numGlobalBytes,\r\n        note: note,\r\n        appArgs: appArgs\r\n    });\r\n\r\n    // Get transaction ID\r\n    let txId = txn.txID().toString();\r\n\r\n    // Sign & submit the transaction\r\n    let signedTxn = await myAlgoConnect.signTransaction(txn.toByte());\r\n    console.log(\"Signed transaction with txID: %s\", txId);\r\n    await algodClient.sendRawTransaction(signedTxn.blob).do();\r\n\r\n    // Wait for transaction to be confirmed\r\n    let confirmedTxn = await algosdk.waitForConfirmation(algodClient, txId, 4);\r\n\r\n    // Get the completed Transaction\r\n    console.log(\"Transaction \" + txId + \" confirmed in round \" + confirmedTxn[\"confirmed-round\"]);\r\n\r\n    // Get created application id and notify about completion\r\n    let transactionResponse = await algodClient.pendingTransactionInformation(txId).do();\r\n    let appId = transactionResponse['application-index'];\r\n    console.log(\"Created new app-id: \", appId);\r\n    return appId;\r\n}\r\n\r\n\r\n// BUY CAR AT INITIAL PRICING:\r\nexport const buyCarAction = async (senderAddress, car) => {\r\n    let params = await algodClient.getTransactionParams().do();\r\n\r\n    // Build required app args as Uint8Array\r\n    let buyArg = new TextEncoder().encode(\"buy\")\r\n    let appArgs = [buyArg]\r\n\r\n    // Create ApplicationCallTxn\r\n    let appCallTxn = algosdk.makeApplicationCallTxnFromObject({\r\n        from: senderAddress,\r\n        appIndex: car.appId,\r\n        onComplete: algosdk.OnApplicationComplete.NoOpOC,\r\n        suggestedParams: params,\r\n        appArgs: appArgs\r\n    })\r\n\r\n    // Create PaymentTxn\r\n    let paymentTxn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n        from: senderAddress,\r\n        to: car.owner,\r\n        amount: car.initialPrice,\r\n        suggestedParams: params\r\n    })\r\n\r\n    let txnArray = [appCallTxn, paymentTxn]\r\n\r\n    // Create group transaction out of previously build transactions\r\n    let groupID = algosdk.computeGroupID(txnArray)\r\n    for (let i = 0; i < 2; i++) txnArray[i].group = groupID;\r\n\r\n    // Sign & submit the group transaction\r\n    let signedTxn = await myAlgoConnect.signTransaction(txnArray.map(txn => txn.toByte()));\r\n    console.log(\"Signed group transaction\");\r\n    let tx = await algodClient.sendRawTransaction(signedTxn.map(txn => txn.blob)).do();\r\n\r\n    // Wait for group transaction to be confirmed\r\n    let confirmedTxn = await algosdk.waitForConfirmation(algodClient, tx.txId, 4);\r\n\r\n    // Notify about completion\r\n    console.log(\"Group transaction \" + tx.txId + \" confirmed in round \" + confirmedTxn[\"confirmed-round\"]);\r\n}\r\n\r\n\r\n// BID CAR PRICING:\r\nexport const bidCarAction = async (senderAddress, car, biddingPrice) => {\r\n    let params = await algodClient.getTransactionParams().do();\r\n    biddingPrice = stringToMicroAlgos(biddingPrice)\r\n\r\n    // Build required app args as Uint8Array\r\n    let bidArg = new TextEncoder().encode(\"bid\")\r\n    let appArgs = [bidArg]\r\n\r\n    // Create ApplicationCallTxn\r\n    let appCallTxn = algosdk.makeApplicationCallTxnFromObject({\r\n        from: senderAddress,\r\n        appIndex: car.appId,\r\n        onComplete: algosdk.OnApplicationComplete.NoOpOC,\r\n        suggestedParams: params,\r\n        appArgs: appArgs\r\n    })\r\n\r\n    // Create PaymentTxn\r\n    let paymentTxn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n        from: senderAddress,\r\n        to: car.owner,\r\n        amount: biddingPrice,\r\n        suggestedParams: params\r\n    })\r\n\r\n    let txnArray = [appCallTxn, paymentTxn]\r\n\r\n    // Create group transaction out of previously build transactions\r\n    let groupID = algosdk.computeGroupID(txnArray)\r\n    for (let i = 0; i < 2; i++) txnArray[i].group = groupID;\r\n\r\n    // Sign & submit the group transaction\r\n    let signedTxn = await myAlgoConnect.signTransaction(txnArray.map(txn => txn.toByte()));\r\n    console.log(\"Signed group transaction\");\r\n    let tx = await algodClient.sendRawTransaction(signedTxn.map(txn => txn.blob)).do();\r\n\r\n    // Wait for group transaction to be confirmed\r\n    let confirmedTxn = await algosdk.waitForConfirmation(algodClient, tx.txId, 4);\r\n\r\n    // Notify about completion\r\n    console.log(\"Group transaction \" + tx.txId + \" confirmed in round \" + confirmedTxn[\"confirmed-round\"]);\r\n}\r\n\r\n\r\n// GET CAR INFO:\r\nexport const getCarsAction = async () => {\r\n    let note = new TextEncoder().encode(carmioNote);\r\n    let encodedNote = Buffer.from(note).toString(\"base64\");\r\n\r\n    // Step 1: Get all transactions by notePrefix (+ minRound filter for performance)\r\n    let transactionInfo = await indexerClient.searchForTransactions()\r\n        .notePrefix(encodedNote)\r\n        .txType(\"appl\")\r\n        .minRound(minRound)\r\n        .do();\r\n\r\n    let cars = []\r\n\r\n    for (const transaction of transactionInfo.transactions) {\r\n        let appId = transaction[\"created-application-index\"]\r\n        if (appId) {\r\n            // Step 2: Get each application by application id\r\n            let car = await getApplication(appId)\r\n            if (car) {\r\n                cars.push(car)\r\n            }\r\n        }\r\n    }\r\n    return cars;\r\n}\r\n\r\n\r\n// GET APPLICATION INFO:\r\nconst getApplication = async (appId) => {\r\n    try {\r\n        // 1. Get application by appId\r\n        let response = await indexerClient.lookupApplications(appId).includeAll(true).do();\r\n        if (response.application.deleted) {\r\n            return null;\r\n        }\r\n        let globalState = response.application.params[\"global-state\"]\r\n\r\n        // 2. Parse fields of response and return car\r\n        let owner = response.application.params.creator\r\n        let image = \"\"\r\n        let name = \"\"\r\n        let brand = \"\"\r\n        let initialPrice = 0\r\n        let currentBidding = 0\r\n        let description = \"\"\r\n        let sold = 0\r\n\r\n        const getField = (fieldName, globalState) => {\r\n            return globalState.find(state => {\r\n                return state.key === utf8ToBase64String(fieldName);\r\n            })\r\n        }\r\n\r\n        if (getField(\"IMAGE\", globalState) !== undefined) {\r\n            let field = getField(\"IMAGE\", globalState).value.bytes\r\n            image = base64ToUTF8String(field)\r\n        }\r\n\r\n        if (getField(\"NAME\", globalState) !== undefined) {\r\n            let field = getField(\"NAME\", globalState).value.bytes\r\n            name = base64ToUTF8String(field)\r\n        }\r\n\r\n        if (getField(\"BRAND\", globalState) !== undefined) {\r\n            let field = getField(\"BRAND\", globalState).value.bytes\r\n            brand = base64ToUTF8String(field)\r\n        }\r\n\r\n        if (getField(\"INITIAL PRICE\", globalState) !== undefined) {\r\n            initialPrice = getField(\"INITIAL PRICE\", globalState).value.uint\r\n        }\r\n\r\n        if (getField(\"CURRENT BIDDING\", globalState) !== undefined) {\r\n            currentBidding = getField(\"CURRENT BIDDING\", globalState).value.uint\r\n        }\r\n\r\n        if (getField(\"DESCRIPTION\", globalState) !== undefined) {\r\n            let field = getField(\"DESCRIPTION\", globalState).value.bytes\r\n            description = base64ToUTF8String(field)\r\n        }\r\n\r\n        if (getField(\"SOLD\", globalState) !== undefined) {\r\n            sold = getField(\"SOLD\", globalState).value.uint\r\n        }\r\n\r\n        return new Carmio(image, name, brand, initialPrice, currentBidding, description, sold, appId, owner)\r\n    } catch (err) {\r\n        return null;\r\n    }\r\n}"],"sourceRoot":""}